import puppeteer from 'puppeteer';
import fs from 'fs';
import dotenv from 'dotenv';
dotenv.config();

export const getYoutubeCookies = async () => {
    try{
        const browser = await puppeteer.launch({
             headless: true,
             cacheDir: '/opt/render/project/src/.cache/puppeteer'
        });
        const page = await browser.newPage();
        console.log('redirecting to google...')
        await page.goto('https://accounts.google.com/signin/v2/identifier');
        console.log('typing email...')
        await page.type('input[type="email"]', process.env.YOUTUBE_EMAIL);
        console.log('next click...')
        await page.click('#identifierNext');
        console.log('waiting for password...')
        await page.waitForSelector('input[type="password"]', { visible: true, timeout: 30000 });
        console.log('typing password...')
        await page.type('input[type="password"]', process.env.YOUTUBE_PASSWORD);
        console.log('clicking next...')
        await page.click('#passwordNext');
        console.log('waiting for network...')
        await page.waitForNavigation({ waitUntil: 'networkidle0' });
        console.log('redirecting to youtube...')
        await page.goto('https://www.youtube.com', { waitUntil: 'networkidle0' });
        console.log('getting cookies...')
        const youtubeCookies = await page.cookies();
        console.log('successfully obtained cookies...')
        await browser.close();
        return youtubeCookies;
    } catch(e) {
        console.log('error obtaining cookies ' + e)
    }
}

export const formatCookiesToNetscape = (youtubeCookies) => {
    let cookieFileContent = `# Netscape HTTP Cookie File\n# This file is generated by yt-dlp. Do not edit.\n\n`;
    youtubeCookies.forEach(cookie => {
        const domain = cookie.domain.startsWith('.') ? cookie.domain : `.${cookie.domain}`;
        const includeSubdomains = cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE';
        const secure = cookie.secure ? 'TRUE' : 'FALSE';
        const expires = cookie.expires > 0 ? Math.floor(cookie.expires) : 0;

        cookieFileContent += `${domain}\t${includeSubdomains}\t${cookie.path}\t${secure}\t${expires}\t${cookie.name}\t${cookie.value}\n`;
    });
    return cookieFileContent;
}